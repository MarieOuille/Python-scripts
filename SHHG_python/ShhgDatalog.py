# -*- coding: utf-8 -*-
"""
Created on Wed Jul 15 12:14:01 2020

@author: ouille


%	Reads the SHHG Datalog file created by ShhgCommandCenter or previous
%	versions from Mai
%	
%	Developement started: 10/2016
%
%	Author: Frederik BÃ¶hle (code@fboehle.de)
%
%*********************************************************
%   
%   Description: Each column of the Datalog file gets converted into an
%   array. The member function **** returns the indizes of the shotNumber
%   given as an input argument
%
%   Notes:
%
%   Changelog:
%

"""





classdef ShhgDatalog < handle

    
    properties
        fileVersion
        shotNumber
        pulseEnergy
        pulseDuration
        chirp
        wedgeInsertion
        parabolaPos
        delay
        seqLength
        paramNo1
        paramNo2
        time
        note
    end

    
    methods
        function shotNumberToIndex(obj)

                    validShots = (obj.shotNumber > 0); %disregard shot number 0 as Matlab indizes start at 1 :-(
                    tempShotNumber = obj.shotNumber(validShots);
                    
                    obj.shotNumber = [];
                    obj.shotNumber(tempShotNumber,1) = tempShotNumber;
                    
                    temp = obj.pulseEnergy;
                    if(~isempty(temp))
                    obj.pulseEnergy = [];
                    obj.pulseEnergy(tempShotNumber,1) = temp(validShots);
                    end
                    
                    temp = obj.pulseDuration;
                    if(~isempty(temp))
                    obj.pulseDuration = [];
                    obj.pulseDuration(tempShotNumber,1) = temp(validShots);
                    end
                    
                    temp = obj.chirp;
                    if(~isempty(temp))
                    obj.chirp = [];
                    obj.chirp(tempShotNumber,1) = temp(validShots);
                    end
                    
                    temp = obj.wedgeInsertion;
                    if(~isempty(temp))
                    obj.wedgeInsertion = [];
                    obj.wedgeInsertion(tempShotNumber,1) = temp(validShots);
                    end
                    
                    temp = obj.parabolaPos;
                    if(~isempty(temp))
                    obj.parabolaPos = [];
                    obj.parabolaPos(tempShotNumber,1) = temp(validShots);
                    end
                    
                    temp = obj.delay;
                    if(~isempty(temp))
                    obj.delay = [];
                    obj.delay(tempShotNumber,1) = temp(validShots);
                    end
                    
                    temp = obj.seqLength;
                    if(~isempty(temp))
                    obj.seqLength = [];
                    obj.seqLength(tempShotNumber,1) = temp(validShots);
                    end
                    
                    temp = obj.paramNo1;
                    if(~isempty(temp))
                    obj.paramNo1 = [];
                    obj.paramNo1(tempShotNumber,1) = temp(validShots);
                    end
                    
                    temp = obj.paramNo2;
                    if(~isempty(temp))
                    obj.paramNo2 = [];
                    obj.paramNo2(tempShotNumber,1) = temp(validShots);
                    end
                    
                    % TODO not working yet
                    %temp = obj.time;
                    %if(~isempty(temp))
                    obj.time = [];
                    %obj.time(tempShotNumber,1) = temp(validShots);
                    %end
                    
                    temp = obj.note;
                    if(~isempty(temp))
                        obj.note = [];
                        tempValid = temp(validShots);
                        for i = 1:length(tempShotNumber)
                            obj.note(tempShotNumber(i)).string = tempValid(i);
                        end
                    end
                    
        end
        
        function obj = ShhgDatalog(filename)
            
            ##TODO put this long strict in a static or member class function
            
           ##get file version informations
            fileID = fopen(filename,'r');
            versionString = textscan(fileID, '%s%n', 1,'Delimiter', ' ');
            obj.fileVersion = versionString{2};
            fclose(fileID);
            
            switch obj.fileVersion
                case 3
                    disp('File Version 3');
                    ## Auto-generated by MATLAB on 2016/10/22 20:09:47
                    ## Initialize variables.
                    #filename = 'C:\TEMP\ToAnalyze\DataLog.txt'; this is set previously
                    delimiter = '\t';
                    startRow = 3;

                    ## Read columns of data as strings:
                    # For more information, see the TEXTSCAN documentation.
                    formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

                    ## Open the text file.
                    fileID = fopen(filename,'r');

                    ## Read columns of data according to format string.
                    # This call is based on the structure of the file used to generate this code. If an error occurs for a different file, try regenerating the code from the Import Tool.
                    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

                    fclose(fileID)  #Close the text file.

                    ## Convert the contents of columns containing numeric strings to numbers.
                    # Replace non-numeric strings with NaN.
                    raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
                    for col=1:length(dataArray)-1
                        raw(1:length(dataArray{col}),col) = dataArray{col};
                    end
                    numericData = NaN(size(dataArray{1},1),size(dataArray,2));

                    for col=[1,2,3,4,5,6,7,8,9,10]
                        # Converts strings in the input cell array to numbers. Replaced non-numeric
                        # strings with NaN.
                        rawData = dataArray{col};
                        for row=1:size(rawData, 1);
                            # Create a regular expression to detect and remove non-numeric prefixes and suffixes.
                            regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
                            try
                                result = regexp(rawData{row}, regexstr, 'names');
                                numbers = result.numbers;

                                # Detected commas in non-thousand locations.
                                invalidThousandsSeparator = false;
                                if any(numbers==',');
                                    thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                                    if isempty(regexp(thousandsRegExp, ',', 'once'));
                                        numbers = NaN;
                                        invalidThousandsSeparator = true;
                                    end
                                end
                                # Convert numeric strings to numbers.
                                if ~invalidThousandsSeparator;
                                    numbers = textscan(strrep(numbers, ',', ''), '%f');
                                    numericData(row, col) = numbers{1};
                                    raw{row, col} = numbers{1};
                                end
                            catch me
                            end
                        end
                    end

                    # Convert the contents of columns with dates to MATLAB datetimes using date format string.
                    try
                        dates{11} = datetime(dataArray{11}, 'Format', 'yyyyMMdd-HH:mm:ss', 'InputFormat', 'yyyyMMdd-HH:mm:ss');
                    catch
                        try
                            # Handle dates surrounded by quotes
                            dataArray{11} = cellfun(@(x) x(2:end-1), dataArray{11}, 'UniformOutput', false);
                            dates{11} = datetime(dataArray{11}, 'Format', 'yyyyMMdd-HH:mm:ss', 'InputFormat', 'yyyyMMdd-HH:mm:ss');
                        catch
                            dates{11} = repmat(datetime([NaN NaN NaN]), size(dataArray{11}));
                        end
                    end

                    anyBlankDates = cellfun(@isempty, dataArray{11});
                    anyInvalidDates = isnan(dates{11}.Hour) - anyBlankDates;
                    dates = dates(:,11);

                    ## Split data into numeric and cell columns.
                    rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,10]);
                    rawCellColumns = raw(:, 12);


                    ## Replace non-numeric cells with NaN
                    R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
                    rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

                    ## Allocate imported array to column variable names
                    obj.shotNumber       = cell2mat(rawNumericColumns(:, 1));
                    obj.pulseEnergy       = cell2mat(rawNumericColumns(:, 2));
                    obj.pulseDuration     = cell2mat(rawNumericColumns(:, 3));
                    obj.chirp             = cell2mat(rawNumericColumns(:, 4));
                    obj.wedgeInsertion    = cell2mat(rawNumericColumns(:, 5));
                    obj.parabolaPos       = cell2mat(rawNumericColumns(:, 6));
                    obj.delay             = cell2mat(rawNumericColumns(:, 7));
                    obj.seqLength         = cell2mat(rawNumericColumns(:, 8));
                    obj.paramNo1          = cell2mat(rawNumericColumns(:, 9));
                    obj.paramNo2          = cell2mat(rawNumericColumns(:, 10));
                    obj.time              = dates{:, 1};
                    obj.note              = rawCellColumns(:, 1);


                    % For code requiring serial dates (datenum) instead of datetime, uncomment
                    % the following line(s) below to return the imported dates as datenum(s).

                    % Notes=datenum(Notes);


                    %% Clear temporary variables
                    clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns rawCellColumns R;        

                otherwise
                    disp('No File Version Information Present. Assuming Maimouna s file format.');
                    
                    %% Import data from text file.
                    % Script for importing data from the following text file:
                    %
                    %    Z:\SHHG\SHOOTOUT\20160921\DataLog.txt
                    %
                    % To extend the code to different selected data or a different text file,
                    % generate a function instead of a script.

                    % Auto-generated by MATLAB on 2016/11/29 18:33:40
                    delimiter = '\t';

                    %% Read columns of data as strings:
                    % For more information, see the TEXTSCAN documentation.
                    formatSpec = '%s%s%s%s%s%s%s%s%s%[^\n\r]';

                    %% Open the text file.
                    fileID = fopen(filename,'r');

                    %% Read columns of data according to format string.
                    % This call is based on the structure of the file used to generate this
                    % code. If an error occurs for a different file, try regenerating the code
                    % from the Import Tool.
                    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

                    %% Close the text file.
                    fclose(fileID);

                    %% Convert the contents of columns containing numeric strings to numbers.
                    % Replace non-numeric strings with NaN.
                    raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
                    for col=1:length(dataArray)-1
                        raw(1:length(dataArray{col}),col) = dataArray{col};
                    end
                    numericData = NaN(size(dataArray{1},1),size(dataArray,2));

                    for col=[1,2,3,4,5,6,7,8]
                        % Converts strings in the input cell array to numbers. Replaced non-numeric
                        % strings with NaN.
                        rawData = dataArray{col};
                        for row=1:size(rawData, 1);
                            % Create a regular expression to detect and remove non-numeric prefixes and
                            % suffixes.
                            regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
                            try
                                result = regexp(rawData{row}, regexstr, 'names');
                                numbers = result.numbers;

                                % Detected commas in non-thousand locations.
                                invalidThousandsSeparator = false;
                                if any(numbers==',');
                                    thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                                    if isempty(regexp(thousandsRegExp, ',', 'once'));
                                        numbers = NaN;
                                        invalidThousandsSeparator = true;
                                    end
                                end
                                % Convert numeric strings to numbers.
                                if ~invalidThousandsSeparator;
                                    numbers = textscan(strrep(numbers, ',', ''), '%f');
                                    numericData(row, col) = numbers{1};
                                    raw{row, col} = numbers{1};
                                end
                            catch me
                            end
                        end
                    end


                    %% Split data into numeric and cell columns.
                    rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8]);
                    rawCellColumns = raw(:, 9);


                    %% Allocate imported array to column variable names
                    obj.shotNumber = cell2mat(rawNumericColumns(:, 1));
                    obj.pulseDuration = cell2mat(rawNumericColumns(:, 2));
                    obj.pulseEnergy = cell2mat(rawNumericColumns(:, 3));
                    obj.chirp = cell2mat(rawNumericColumns(:, 4));
                    obj.seqLength = cell2mat(rawNumericColumns(:, 5));
                    obj.paramNo1 = cell2mat(rawNumericColumns(:, 6));
                    obj.parabolaPos = cell2mat(rawNumericColumns(:, 7));
                    obj.delay = cell2mat(rawNumericColumns(:, 8));
                    obj.note = rawCellColumns(:, 1);


                    %% Clear temporary variables
                    clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns;

            end
            obj.shotNumberToIndex();
        end
        
    end
    
    methods(Static)
        function exampleStaticFunction(variable)         
        end
    end
end
